<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_neo4j">
    <title>Learning Neo4j</title>
    <subtitle>Graphs ahead</subtitle>
    <para>
        Now we needed to figure out how to store our chosen domain model in the chosen database.
        First we read up about graph databases, in particular our chosen one,
        <ulink url="http://neo4j.org">Neo4j</ulink>.
        The Neo4j data model consists of nodes and relationships, both of which can have key/value-style
        properties. What does that mean, exactly? Nodes are the graph database name for records, 
        with property keys instead of column names. That's normal enough. Relationships are the special part.
        In Neo4j, relationships are first-class citizens, meaning they are more than a simple foreign-key 
        reference to another record, relationships carry information. So we can link together nodes
        into semantically rich networks. This really appealed to us. Then we found that we were also able to
        <ulink url="http://docs.neo4j.org/chunked/milestone/indexing.html">index nodes and relationships</ulink>
        by {key, value} pairs. We also found that we could traverse relationships both imperatively using
        the core API, and declaratively using a query-like
        <ulink url="http://docs.neo4j.org/chunked/milestone/tutorials-java-embedded-traversal.html">Traversal Description</ulink>. Besides
        those programmatic traversals there was the powerful graph query language called
        <ulink url="http://docs.neo4j.org/chunked/milestone/cypher-query-lang.html">Cypher</ulink> and an interesting
        looking DSL named <ulink url="https://github.com/tinkerpop/gremlin/wiki">Gremlin</ulink>. So lots of ways of working with the graph.
    </para>
    <para>
        We also learned that Neo4j is fully transactional and therefore upholds
        <ulink url="http://en.wikipedia.org/wiki/ACID">ACID</ulink> guarantees for our data.
        Durability is actually a good thing and we didn't have to scale to trillions of users and movies yet.
        This is unusual for NOSQL databases, but easier for us to get our head around than non-transactional
        eventual consistency. It also made us feel safe, though it also meant that we had to manage transactions.
        Something to keep in mind later.
    </para>
    <para>
        We started out by doing some prototyping with the Neo4j core API to get a feeling for how it works. And 
        also, to see what the domain might look like when it's saved in the graph database. After adding the Maven
        dependency for Neo4j, we were ready to go. 
    </para>
    <para>
        <example>
            <title>Neo4j Maven dependency</title>
            <programlisting language="xml" ><![CDATA[<dependency>
    <groupId>org.neo4j</groupId>
    <artifactId>neo4j</artifactId>
    <version>1.8.1</version>
</dependency>
]]></programlisting>
        </example>
    </para>
    <para>
        <example>
            <title>Neo4j core API (transaction code omitted)</title>
            <programlisting language="java" ><![CDATA[enum RelationshipTypes implements RelationshipType { ACTS_IN };

GraphDatabaseService gds = new EmbeddedGraphDatabase("/path/to/store");
Node forrest=gds.createNode();
forrest.setProperty("title","Forrest Gump");
forrest.setProperty("year",1994);
gds.index().forNodes("movies").add(forrest,"id",1);

Node tom=gds.createNode();
tom.setProperty("name","Tom Hanks");

Relationship role=tom.createRelationshipTo(forrest,ACTS_IN);
role.setProperty("role","Forrest");

Node movie=gds.index().forNodes("movies").get("id",1).getSingle();
assertEquals("Forrest Gump", movie.getProperty("title"));
for (Relationship role : movie.getRelationships(ACTS_IN,INCOMING)) {
    Node actor=role.getOtherNode(movie);
    assertEquals("Tom Hanks", actor.getProperty("name"));
    assertEquals("Forrest", role.getProperty("role"));
}
]]></programlisting>
        </example>
    </para>
</chapter>
