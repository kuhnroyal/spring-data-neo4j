<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="reference:neo4j-server">
    <title>Neo4j Server</title>
    <para>
        Neo4j is not only available in embedded mode. It can also be installed and run as a stand-alone server
        accessible via a REST API. Developers can integrate Spring Data Neo4j into the Neo4j server infrastructure
        in two ways: in an unmanaged server extension, or via the REST API.
    </para>
    <section>
        <title>Server Extension</title>
        <para>
            When should you write a server extension? The default REST API is essentially a REST'ified representation
            of the Neo4j core API. It is nice for getting started, and for simpler scenarios. For more involved
            solutions that require high-volume access or more complex operations, writing a server extension that
            is able to process external parameters, do all the computations locally in the plugin, and then return
            just the relevant information to the calling client is preferable.
        </para>
        <para>
            The Neo4j Server has two built-in extension mechanisms. It is possible to extend existing URI endpoints
            like the graph database, nodes, or relationships, adding new URIs or methods to those. This is achieved
            by writing a <ulink url="http://docs.neo4j.org/chunked/milestone/server-plugins.html">server plugin</ulink>.
            This plugin type has some restrictions however.
        </para>
        <para>
            For complete freedom in the implementation, an
            <ulink url="http://docs.neo4j.org/chunked/milestone/server-unmanaged-extensions.html">unmanaged extension</ulink>
            can be used. Unmanaged extensions are essentially <ulink url="http://jersey.java.net/">Jersey</ulink>
            resource implementations. The resource constructors or methods can get the
            <code>GraphDatabaseService</code> injected to execute the necessary operations and return appropriate
            <code>Representations</code>.
        </para>
        <para>
            Both kinds of extensions have to be packaged as JAR files and added to the Neo4j Server's plugin
            directory. Server Plugins are picked up by the server at startup if they provide the necessary
            <code>META-INF.services/org.neo4j.server.plugins.ServerPlugin</code> file for Java's ServiceLoader
            facility. Unmanaged extensions have to be registered with the Neo4j Server configuration.
        </para>
        <example>
            <title>Configuring an unmanaged extension</title>
            <programlisting language="ini"><![CDATA[org.neo4j.server.thirdparty_jaxrs_classes=com.example.mypackage=/my-context]]></programlisting>
        </example>
        <para>
            Running Spring Data Neo4j on the Neo4j Server is easy. You need to tell the server where to find the
            Spring context configuration file, and which beans from it to expose:
            <example>
                <title>Server plugin initialization</title>
                <programlisting language="java"><![CDATA[public class HelloWorldInitializer extends SpringPluginInitializer {
    public HelloWorldInitializer() {
        super(new String[]{"spring/helloWorldServer-Context.xml"},
              Pair.of("worldRepository", WorldRepository.class),
              Pair.of("template", Neo4jTemplate.class));
    }
}
]]></programlisting>
            </example>

            Now, your resources can require the Spring beans they need, annotated with <code>@Context</code> like this:
            <example>
                <title>Jersey resource</title>
                <programlisting language="java"><![CDATA[@Path( "/path" )
@POST
@Produces( MediaType.APPLICATION_JSON )
public void foo( @Context WorldRepository repo ) {
    ...
}
]]></programlisting>
            </example>
            The <code>SpringPluginInitializer</code> merges the server provided <code>GraphDatabaseService</code> with the Spring configuration
            and registers the named beans as Jersey <code>Injectables</code>. It is still necessary to list the
            initializer's fully qualified class name in a file named
            <code>META-INF/services/org.neo4j.server.plugins.PluginLifecycle</code>. The Neo4j Server can then pick
            up and run the initialization classes before the extensions are loaded.
        </para>        	   
    </section>
    <section>
        <title>Using Spring Data Neo4j as a REST client</title>
        <para>
            To use REST-API the Neo4j Server exposes, one would either go with REST libraries on the lower level or choose one of the Neo4j related
            REST drivers in various languages. For Java Neo4j provides the <ulink url="https://github.com/neo4j/java-rest-binding">Neo4j Java REST bindings</ulink>
            which come as a drop in replacement for the <code>GraphDatabaseService</code> API. Spring Data Neo4j REST uses those bindings to provide seamless
            access to a remote Neo4j Database.
        </para>
        <para>
            By simply configuring the <code>graphDatabaseService</code> to be a <code>SpringRestGraphDatabase</code> pointing to a Neo4j Server instance and
            referring to that from <code>&lt;neo4j:config&gt;</code> Spring Data Neo4j will use the server side database for both the simple mapping as
            well as the advanced mapping.
        </para>
        <note>
            <para>
                The Neo4j Server REST API does not allow for transactions to span across requests, which means
                that Spring Data Neo4j is not transactional across multiple operations when running with a <code>SpringRestGraphDatabase</code>.
            </para>
        </note>
        <para>
            Please also keep in mind that performing graph operations via the REST-API is about one order of
            magnitude slower than local operations. Try to use the Neo4j Cypher query language,
            server-side traversals (<code>RestTraversal</code>) or Gremlin expressions whenever possible for retrieving large sets of data.
            Future versions of Spring Data Neo4j will use the more performant batch API as well as a binary protocol.
        </para>
        <para>
        To set up your project to use the REST bindings, add this dependency to your pom.xml:
<example>
    <title>REST-Client configuration - pom.xml</title>
    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.springframework.data</groupId>
  <artifactId>spring-data-neo4j-rest</artifactId>
  <version>2.1.0.RELEASE</version>
</dependency>
]]></programlisting>
            </example>
            Now, you set up the normal Spring Data Neo4j configuration, but point the database to an URL instead
            of a local directory, like so:
            <example>
                <title>REST client configuration - application context</title>
                <programlisting language="xml"><![CDATA[<neo4j:config graphDatabaseService="graphDatabaseService"/>

<bean id="graphDatabaseService" class="org.springframework.data.neo4j.rest.SpringRestGraphDatabase">
    <constructor-arg value="http://localhost:7474/db/data/" index="0"/>
<!-- for running against a server requiring authentication
    <constructor-arg value="username" index="1"/>
    <constructor-arg value="password" index="2"/>
-->
</bean>
]]></programlisting>
            </example>
            Your project is now set up to work against a remote Neo4j Server.
        </para>
        <para>
            For traversals and Cypher and Gremlin graph queries it is sensible to forward those to the remote endpoint and execute them there
            instead of walking the graph over the wire. SpringRestGraphDatabase already supports that by providing methods that forward
            to the remote instance. (e.g. <code>queryEngineFor(), index() and createTraversalDescription()</code>).
            Please use those methods when interacting with a remote server for optimal performance. Those methods are also
            used by the Neo4jTemplate and the mapping infrastructure automatically.
        </para>
        <para>

        </para>
    </section>
</chapter>
